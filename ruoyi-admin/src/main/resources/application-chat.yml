spring:
  neo4j:
    uri: bolt://192.168.1.164:7687
    authentication:
      username: neo4j
      password: ruoyiRag123456
    database: ruoyiRag
  data:
    mongodb:
      uri: mongodb://root:ruoyiRag123456@192.168.1.164:27017/ruoyi_rag?authSource=admin
    neo4j:
      database: ruoyiRag
      #设置 repositories 类型为 imperative（命令式）
      repositories:
        type: imperative
      #启用原生类型支持
      use-native-types: true
      #使用 Neo4j 的原生 ID 生成（使用 elementId() 而不是 id()）
      id-generation: NATIVE
      # 配置 Neo4j 驱动
      driver:
        config:
          database: ruoyiRag
          # 启用日志记录
          logging:
            level: debug
          # 启用 native 数字类型
          native-numbers: true

  ai:
    openai:
      # openai: gpt-3.5-turbo gpt-4o
      base-url: https://api.deepseek.com/
      api-key: sk-99e6f3e696354691a831d77b882e42b9
      chat:
        options:
          model: deepseek-chat
          temperature: 0.7
    ollama:
      # ollama config: qwen2:7b  llama3:latest
      base-url: http://192.168.20.66:11434
      embedding:
        model: nomic-embed-text:latest
    zhipuai:
      api-key: ${ZHIPUAI_API_KEY}
      chat:
        options:
          model: glm-4-air
          temperature: 0.7
      embedding:
        options:
          model: embedding-3
    vectorstore:
      qdrant:
        host: 192.168.1.164
        port: 6334
        initialize-schema: true
        collection-name: rag
    mcp:
      client:
        enabled: true
        name: spring-ai-mcp-client
        type: ASYNC
        sse:
          connections:
#            server1:
#              url: https://mcp.amap.com
#              sse-endpoint: /sse?key=${GAODE_API_KEY}
            server2:
              url: http://localhost:9055
              sse-endpoint: /sse
        stdio:
          servers-configuration: classpath:mcp-server.json




# SearXNG配置
searxng:
  host: http://192.168.1.164:8180
  timeout: 5000
